import { Dropzone } from './dropzone';
import { StickyMarkdown } from './markdown';
import { StickyCode } from './code';
export var ContentType;
(function (ContentType) {
    ContentType["Dropzone"] = "Dropzone";
    ContentType["Code"] = "Code";
    ContentType["Markdown"] = "Markdown";
})(ContentType || (ContentType = {}));
export class StickyContent {
    constructor(stickyContainer, panel, stickyLand) {
        this.isDisposed = false;
        /**
         * Replace the current content with a dropzone
         */
        this.showDropzone = () => {
            var _a;
            this.curContent = new Dropzone(this);
            // It only happens when the user closes the last sticky code/md cell
            // Dehighlight the tab name
            (_a = this.stickyLand.stickyTab.activeTab) === null || _a === void 0 ? void 0 : _a.tabNode.classList.remove('new-update');
        };
        /**
         * Replace the dropzone content with a clone of an existing cell
         * @param cell Existing cell that the users drag over
         * @param newCellType Cell type of the current cell
         */
        this.swapDropzoneWithExistingCell = (cell, newCellType) => {
            // Remove the dropzone
            this.curContent.dispose();
            // Add a new cell
            switch (newCellType) {
                case ContentType.Markdown:
                    // Initialize a markdown cell
                    this.curContent = StickyMarkdown.createFromExistingCell(this, cell, this.notebook);
                    break;
                case ContentType.Code:
                    // Initialize a code cell
                    this.curContent = StickyCode.createFromExistingCell(this, cell, this.notebook);
                    break;
                default:
                    break;
            }
            // Notify the tab to update tab name
            this.stickyLand.stickyTab.updateActiveTab();
        };
        /**
         * Replace the dropzone content with a new cell. This operation will append a
         * new cell to the main notebook.
         * @param newCellType New cell type
         */
        this.swapDropzoneWithNewCell = (newCellType) => {
            switch (newCellType) {
                case ContentType.Code:
                    // Remove the dropzone
                    this.curContent.dispose();
                    // Initialize a new code cell
                    this.curContent = StickyCode.createFromNewCell(this, this.notebook);
                    break;
                case ContentType.Markdown:
                    // Remove the dropzone
                    this.curContent.dispose();
                    // Initialize a markdown cell
                    this.curContent = StickyMarkdown.createFromNewCell(this, this.notebook);
                    break;
                default:
                    break;
            }
            // Notify the tab to update tab name
            this.stickyLand.stickyTab.updateActiveTab();
        };
        /**
         * Handle drag enter according to the current content type
         * @param event Lumino IDragEvent
         */
        this.dragEnterHandler = (event) => {
            if (this.curContent instanceof Dropzone) {
                this.curContent.dragEnterHandler(event);
            }
        };
        /**
         * Handle drag over according to the current content type
         * @param event Lumino IDragEvent
         */
        this.dragOverHandler = (event) => {
            if (this.curContent instanceof Dropzone) {
                this.curContent.dragOverHandler(event);
            }
        };
        /**
         * Handle drop leave according to the current content type
         * @param event Lumino IDragEvent
         */
        this.dragDropHandler = (event) => {
            if (this.curContent instanceof Dropzone) {
                this.curContent.dragDropHandler(event);
            }
        };
        /**
         * Handle drag leave according to the current content type
         * @param event Lumino IDragEvent
         */
        this.dragLeaveHandler = (event) => {
            if (this.curContent instanceof Dropzone) {
                this.curContent.dragLeaveHandler(event);
            }
        };
        this.swapToDropzone = () => {
            // Dispose the current content
            this.curContent.closeClicked();
        };
        this.dispose = () => {
            // Dispose the current content
            this.curContent.closeClicked();
            // Dispose the dropzone
            this.curContent.dispose();
            this.wrapperNode.remove();
            this.isDisposed = true;
        };
        this.stickyContainer = stickyContainer;
        this.notebook = panel;
        this.stickyLand = stickyLand;
        // Add the content element
        this.wrapperNode = document.createElement('div');
        this.wrapperNode.classList.add('sticky-content');
        this.stickyContainer.appendChild(this.wrapperNode);
        // Add a header and a content
        this.headerNode = document.createElement('div');
        this.headerNode.classList.add('header');
        this.wrapperNode.appendChild(this.headerNode);
        this.contentNode = document.createElement('div');
        this.contentNode.classList.add('content');
        this.wrapperNode.appendChild(this.contentNode);
        // Show a dropzone at first
        this.curContent = new Dropzone(this);
    }
}
