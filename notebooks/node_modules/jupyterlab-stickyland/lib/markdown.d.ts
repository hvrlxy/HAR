import { IDisposable } from '@lumino/disposable';
import { LabIcon } from '@jupyterlab/ui-components';
import { NotebookPanel } from '@jupyterlab/notebook';
import { MarkdownCell } from '@jupyterlab/cells';
import CodeMirror from 'codemirror';
import { IRenderMime } from '@jupyterlab/rendermime-interfaces';
import { FloatingWindow } from './floating';
import { StickyContent } from './content';
/**
 * Class that implements the Markdown cell in StickyLand.
 */
export declare class StickyMarkdown implements IDisposable {
    stickyContent: StickyContent;
    node: HTMLElement;
    toolbar: HTMLElement;
    cellNode: HTMLElement;
    originalCell: MarkdownCell;
    cell: MarkdownCell;
    renderer: IRenderMime.IRenderer;
    notebook: NotebookPanel;
    codemirror: CodeMirror.Editor;
    isDisposed: boolean;
    floatingWindow: FloatingWindow;
    isFloating: boolean;
    /**
     * Factory function for StickyMarkdown when creating if from an existing cell
     * through dragging
     * @param stickyContent The sticky content that contains this markdown cell
     * @param cell The existing markdown cell
     * @param notebook The current notebook
     * @returns A new StickyMarkdown object
     */
    static createFromExistingCell(stickyContent: StickyContent, cell: MarkdownCell, notebook: NotebookPanel): StickyMarkdown;
    /**
     * Factory function for StickyMarkdown when creating if from a new markdown
     * cell. This function would append a new markdown cell to the main notebook.
     * @param stickyContent The sticky content that contains this markdown cell
     * @param notebook The current notebook
     * @returns A new StickyMarkdown object
     */
    static createFromNewCell(stickyContent: StickyContent, notebook: NotebookPanel): StickyMarkdown;
    /**
     * Strip unnecessary elements from the nodes before appending it to stickyland
     */
    cleanCellClone: () => void;
    /**
     * Bind event handlers for sticky markdown cell.
     */
    bindEventHandlers: () => void;
    /**
     * Create a toolbar element
     * @param items List of toolbar item names and onclick handlers
     */
    createToolbar: (items: {
        name: string;
        title: string;
        icon: LabIcon;
        onClick: (e: Event) => any;
    }[]) => HTMLElement;
    /**
     * Helper function to enter the editor mode.
     */
    enterEditor: () => void;
    /**
     * Helper function to quit the editor mode.
     */
    quitEditor: () => void;
    /**
     * A helper function to force render latex after timeout.
     * @param timeout Call the latex renderer after `timeout` ms
     */
    renderLatex: (timeout?: number) => void;
    /**
     * Float the current code cell.
     */
    float: () => void;
    editClicked: (event: Event) => void;
    runClicked: (event: Event) => void;
    launchClicked: (event: Event) => void;
    closeClicked: () => void;
    toolBarItems: {
        name: string;
        title: string;
        icon: LabIcon;
        onClick: (event: Event) => void;
    }[];
    dispose(): void;
}
