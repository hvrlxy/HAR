import { IDisposable } from '@lumino/disposable';
import { IDragEvent } from '@lumino/dragdrop';
import { NotebookPanel } from '@jupyterlab/notebook';
import { Cell } from '@jupyterlab/cells';
import { Dropzone } from './dropzone';
import { StickyMarkdown } from './markdown';
import { StickyCode } from './code';
import { StickyLand } from './stickyland';
export declare enum ContentType {
    Dropzone = "Dropzone",
    Code = "Code",
    Markdown = "Markdown"
}
export declare class StickyContent implements IDisposable {
    stickyContainer: HTMLElement;
    wrapperNode: HTMLElement;
    headerNode: HTMLElement;
    contentNode: HTMLElement;
    curContent: Dropzone | StickyMarkdown | StickyCode;
    notebook: NotebookPanel;
    stickyLand: StickyLand;
    isDisposed: boolean;
    constructor(stickyContainer: HTMLElement, panel: NotebookPanel, stickyLand: StickyLand);
    /**
     * Replace the current content with a dropzone
     */
    showDropzone: () => void;
    /**
     * Replace the dropzone content with a clone of an existing cell
     * @param cell Existing cell that the users drag over
     * @param newCellType Cell type of the current cell
     */
    swapDropzoneWithExistingCell: (cell: Cell, newCellType: ContentType) => void;
    /**
     * Replace the dropzone content with a new cell. This operation will append a
     * new cell to the main notebook.
     * @param newCellType New cell type
     */
    swapDropzoneWithNewCell: (newCellType: ContentType) => void;
    /**
     * Handle drag enter according to the current content type
     * @param event Lumino IDragEvent
     */
    dragEnterHandler: (event: IDragEvent) => void;
    /**
     * Handle drag over according to the current content type
     * @param event Lumino IDragEvent
     */
    dragOverHandler: (event: IDragEvent) => void;
    /**
     * Handle drop leave according to the current content type
     * @param event Lumino IDragEvent
     */
    dragDropHandler: (event: IDragEvent) => void;
    /**
     * Handle drag leave according to the current content type
     * @param event Lumino IDragEvent
     */
    dragLeaveHandler: (event: IDragEvent) => void;
    swapToDropzone: () => void;
    dispose: () => void;
}
