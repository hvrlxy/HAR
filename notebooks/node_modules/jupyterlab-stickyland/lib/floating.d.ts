import { IDisposable } from '@lumino/disposable';
import { ContentType } from './content';
import { StickyCode } from './code';
import { StickyMarkdown } from './markdown';
import { StickyTab, Tab } from './tab';
import { StickyLand } from './stickyland';
declare type Position = {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * Class that implements the Code cell in StickyLand.
 */
export declare class FloatingWindow implements IDisposable {
    node: HTMLElement;
    stickyCell: StickyCode | StickyMarkdown;
    stickyTab: StickyTab;
    stickyLand: StickyLand;
    tab: Tab | null;
    header: HTMLElement;
    placeholder: HTMLElement;
    cellType: ContentType;
    isDisposed: boolean;
    lastMousePos: number[];
    startPos: Position | null;
    endPos: Position | null;
    constructor(cellType: ContentType, stickyCell: StickyCode | StickyMarkdown);
    /**
     * Compute the initial window position + size
     */
    registerStartPos: () => void;
    /**
     * Compute the ending floating window position + size
     */
    registerEndPos: () => void;
    /**
     * Animate the launching process of the floating window
     */
    playLaunchingAnimation: () => void;
    /**
     * Animate the landing process of the floating window
     */
    playLandingAnimation: (callback: () => void) => void;
    /**
     * Add a place holder in the content node in StickyLand when the cell is floating
     * @returns Placeholder node
     */
    addPlaceholder: () => HTMLDivElement;
    /**
     * Put the cell back to StickyLand.
     * @param e Event
     */
    landButtonClicked: (e: Event) => void;
    /**
     * Land the sticky window and close the corresponding tab
     * @param e Event
     */
    closeButtonClicked: (e: Event) => void;
    /**
     * Put back the elements to the StickyLand.
     */
    land: () => void;
    /**
     * Event handler for mouse down. It trigger the document to listen to mouse
     * move events
     * @param e Event
     */
    headerMousedownHandler: (e: Event) => void;
    dispose(): void;
}
export {};
